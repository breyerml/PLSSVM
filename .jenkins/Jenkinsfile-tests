
#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "Jenkins", subject: "Jenkins Tests", status: "skipped")

if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER}  triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") {
        if (env.BUILD_NUMBER != "1") { // Always execute first build to load this configuration and thus the triggers
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            buildbadge.setStatus('skipped')
            currentBuild.result = 'ABORTED'
            return // early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
}


pipeline {
    agent { label ' pcsgs02 ' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
	disableConcurrentBuilds()
    }

    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        BRANCH_NAME = "${env.BRANCH_NAME}"
    }

    stages {
        stage('init') {
            steps {
                dir('plssvm') {
                    sh '''
                        gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${gitlab_token}" \
                            --data "{
                                \\"state\\": \\"pending\\",
                                \\"context\\": \\"jenkins-ctest\\",
                                \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                                \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Multibranch-Github/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                        }"
                    '''
                }
            }
        }
        stage('checkout') {
            steps {
                dir('plssvm') {
                    checkout scm
                }
            }
        }
        stage('setup environment'){
            steps{ // TODO: own spack and update  ?
                sh '''
                    bash
                    rm -rf /tmp/*
                    mkdir -p /import/sgs.scratch/jenkins/PLSSVM
                    mkdir -p /data/scratch/jenkins/PLSSVM/tmp
                    chmod a+rwx /data/scratch/jenkins
                    chmod --recursive a+rwx /data/scratch/jenkins/PLSSVM
                    export TMP=/data/scratch/jenkins/PLSSVM/tmp
                    if [[ ! -d /import/sgs.scratch/jenkins/PLSSVM/spack ]]; then
                        git clone -b develop --depth 1 git@github.com:vancraar/spack.git /import/sgs.scratch/jenkins/PLSSVM/spack
                    fi
                    source /import/sgs.scratch/jenkins/PLSSVM/spack/share/spack/setup-env.sh
                    spack env activate  --with-view -d spack_environments/cuda
                    spack install || echo ""
                    chmod --recursive a+rwx /data/scratch/jenkins/PLSSVM
                    // rm -rf /data/scratch/jenkins/PLSSVM/tmp
                    rm -rf /tmp/CMakeHIPCompilerId*
                    rm -rf /tmp/csvm*
                    rm -rf /tmp/device_ptr*
                    rm -rf /tmp/exceptsions*
                '''
            }
        }
        stage('setup python'){
            steps{
                sh '''
                    /usr/bin/python3.8 -m pip install --user arff
                    /usr/bin/python3.8 -m pip install --user pandas
                    /usr/bin/python3.8 -m pip install --user sklearn
                    /usr/bin/python3.8 -m pip install --user argparse
                '''
            }
        }
        stage('build plssvm Release') {
            steps {
                dir('plssvm') {
                    sh '''
                        source /import/sgs.scratch/jenkins/PLSSVM/spack/share/spack/setup-env.sh
                        spack env activate  --with-view -d spack_environments/cuda
                        spack install
                        mkdir -p build/Release
                        cd build/Release
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX=clang++ -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_80" -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON -DPLSSVM_ENABLE_ASSERTS=ON ../../
                        make VERBOSE=TRUE
                    '''
                }
            }
        }
        stage('run tests Release') {
            steps {
                dir('plssvm') {
                    warnError('Release tests failed!') {
                        sh '''
                            source /import/sgs.scratch/jenkins/PLSSVM/spack/share/spack/setup-env.sh
                            spack env activate  --with-view -d spack_environments/cuda
                            spack install
                            cd build/Release
                            ctest -j4 --no-compress-output -T Test
                        '''
                    }
                }
            }
        }

        stage('build plssvm Debug and coverage analysis') {
            steps {
                dir('plssvm') {
                    sh '''
                        source /import/sgs.scratch/jenkins/PLSSVM/spack/share/spack/setup-env.sh
                        spack env activate  --with-view -d spack_environments/cuda
                        spack install
                        mkdir -p build/Debug_cov
                        cd build/Debug_cov
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Coverage -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_86" -DPLSSVM_TEST_FILE_NUM_DATA_POINTS=100 -DPLSSVM_TEST_FILE_NUM_FEATURES=20 ../../
                        make -j4 coverage
                        wget -N https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py
                        python lcov_cobertura.py test_clean.info
                    '''
                    cobertura coberturaReportFile: 'build/Debug_cov/coverage.xml'
                }
            }
        }
        // stage('build plssvm hipSYCL Debug') {
        //     steps {
        //         dir('plssvm') {
        //             sh '''
        //                 source /import/sgs.local/scratch/breyerml/spack/share/spack/setup-env.sh
        //                 module use /home/breyerml/.modulefiles/
        //                 module load network_hipsycl_cuda
        //                 mkdir -p build/Debug_hip
        //                 cd build/Debug_hip
        //                 rm -rf *
        //                 cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="cpu;nvidia:sm_80" -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=OFF -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON ../../
        //                 make -j4
        //             '''
        //         }
        //     }
        //}
/*
        stage('build plssvm DPC++ Debug') {
            steps {
                dir('plssvm') {
                    sh '''
                        source /import/sgs.local/scratch/breyerml/spack/share/spack/setup-env.sh
                        module use /home/breyerml/.modulefiles/
                        module load network_dpcpp_cuda
                        mkdir -p build/Debug_dpcpp
                        cd build/Debug_dpcpp
                        rm -rf *
                        cmake -DCMAKE_BUILD_TYPE=Debug -DPLSSVM_TARGET_PLATFORMS="nvidia:sm_80" -DCMAKE_CXX_COMPILER=clang++ -DPLSSVM_ENABLE_OPENMP_BACKEND=OFF -DPLSSVM_ENABLE_CUDA_BACKEND=ON -DPLSSVM_ENABLE_OPENCL_BACKEND=OFF -DPLSSVM_ENABLE_SYCL_BACKEND=ON ../../
                        make -j4
                    '''
                }
            }
        }
*/
    }
    post {
        always {
            // Process the CTest xml output with the xUnit plugin
            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    skipped(failureThreshold: '0'),
                    failed(failureThreshold: '0')
                ],
                tools: [CTest(
                    pattern: 'plssvm/build/*/Testing/**/*.xml',
                    deleteOutputFiles: true,
                    failIfNotNew: false,
                    skipNoTestFiles: true,
                    stopProcessingIfError: true
                )]
            )

        }
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Multibranch-Github/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Multibranch-Github/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                gitlab_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl --verbose\
                    --request POST \
                    --url "https://api.github.com/repos/SC-SGS/PLSSVM/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${gitlab_token}" \
                    --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"jenkins-ctest\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-ctest\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/view/PLSSVM/job/PLSSVM/job/Multibranch-Github/job/${BRANCH_NAME}/$BUILD_NUMBER\\"
                }"
            '''
        }
    }
}